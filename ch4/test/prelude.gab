// Void - the uninhabited type

data void :=;

def absurd f := case f : void of;


// Unit

data unit := Unit;


// Booleans

data bool := True | False;

def if c t e := case c of True => t | False => e;

def not b := if b False True;


// Basic higher-order functions

def id x := x;

def const x y := y;

def compose f g x := f (g x);

def flip f x y := f y x;


// Natural numbers

data nat := Zero | Succ nat;

def add := fix fn go x y. case x
    of Zero    => y
     | Succ x' => Succ (go x' y);

def mult := fix fn go x y. case x
    of Zero    => Zero
     | Succ x' => add y (go x' y);

def funpow f := fix fn go n. case n
    of Zero    => id
     | Succ n' => compose f (go n');